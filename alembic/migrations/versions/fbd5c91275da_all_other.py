"""all_other

Revision ID: fbd5c91275da
Revises: c5310cc1cced
Create Date: 2025-03-25 15:27:20.036495

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import geoalchemy2


# revision identifiers, used by Alembic.
revision: str = "fbd5c91275da"
down_revision: Union[str, None] = "c5310cc1cced"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE EXTENSION IF NOT EXISTS postgis;")
    op.create_table(
        "weather_data",
        sa.Column("weather_data_id", sa.BigInteger(), nullable=False),
        sa.Column(
            "location",
            geoalchemy2.types.Geometry(
                geometry_type="POINT",
                srid=4326,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.Column("timestamp", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "temperature_celsius", sa.Numeric(precision=4, scale=1), nullable=True
        ),
        sa.Column("wind_speed_knots", sa.Numeric(precision=5, scale=1), nullable=True),
        sa.Column(
            "wind_direction_degrees", sa.Numeric(precision=5, scale=1), nullable=True
        ),
        sa.Column("pressure_hpa", sa.Numeric(precision=6, scale=1), nullable=True),
        sa.Column("humidity_percent", sa.Numeric(precision=5, scale=1), nullable=True),
        sa.Column("precipitation_mm", sa.Numeric(precision=5, scale=1), nullable=True),
        sa.Column("visibility_km", sa.Numeric(precision=5, scale=1), nullable=True),
        sa.Column(
            "wave_height_meters", sa.Numeric(precision=4, scale=1), nullable=True
        ),
        sa.Column(
            "wave_period_seconds", sa.Numeric(precision=4, scale=1), nullable=True
        ),
        sa.Column(
            "wave_direction_degrees", sa.Numeric(precision=5, scale=1), nullable=True
        ),
        sa.Column("data_source", sa.String(length=100), nullable=True),
        sa.PrimaryKeyConstraint("weather_data_id"),
    )
    op.create_index(
        "idx_weather_data_location",
        "weather_data",
        ["location"],
        unique=False,
        postgresql_using="gist",
        if_not_exists=True,
    )
    op.create_index(
        "idx_weather_data_timestamp", "weather_data", ["timestamp"], unique=False
    )
    op.create_table(
        "ais_data",
        sa.Column("ais_data_id", sa.BigInteger(), nullable=False),
        sa.Column("vessel_id", sa.Integer(), nullable=False),
        sa.Column("timestamp", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "position",
            geoalchemy2.types.Geometry(
                geometry_type="POINT",
                srid=4326,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.Column(
            "course_over_ground", sa.Numeric(precision=5, scale=2), nullable=True
        ),
        sa.Column("speed_over_ground", sa.Numeric(precision=5, scale=2), nullable=True),
        sa.Column("rate_of_turn", sa.Numeric(precision=5, scale=2), nullable=True),
        sa.Column("navigation_status", sa.Integer(), nullable=True),
        sa.Column("raw_data", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(["vessel_id"], ["vessels.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("ais_data_id"),
    )
    op.create_index(
        "idx_ais_data_position",
        "ais_data",
        ["position"],
        unique=False,
        postgresql_using="gist",
        if_not_exists=True,
    )
    op.create_index("idx_ais_data_timestamp", "ais_data", ["timestamp"], unique=False)
    op.create_index(
        "idx_ais_data_vessel_timestamp",
        "ais_data",
        ["vessel_id", "timestamp"],
        unique=False,
    )
    op.create_table(
        "locations",
        sa.Column("location_id", sa.BigInteger(), nullable=False),
        sa.Column("vessel_id", sa.Integer(), nullable=False),
        sa.Column("timestamp", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "position",
            geoalchemy2.types.Geometry(
                geometry_type="POINT",
                srid=4326,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.Column("accuracy_meters", sa.Numeric(precision=5, scale=2), nullable=True),
        sa.Column("source", sa.String(length=50), nullable=True),
        sa.ForeignKeyConstraint(["vessel_id"], ["vessels.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("location_id"),
    )
    op.create_index(
        "idx_locations_position",
        "locations",
        ["position"],
        unique=False,
        postgresql_using="gist",
        if_not_exists=True,
    )
    op.create_index("idx_locations_timestamp", "locations", ["timestamp"], unique=False)
    op.create_index(
        "idx_locations_vessel_timestamp",
        "locations",
        ["vessel_id", "timestamp"],
        unique=False,
    )
    op.create_table(
        "maintenance_records",
        sa.Column("maintenance_id", sa.Integer(), nullable=False),
        sa.Column("vessel_id", sa.Integer(), nullable=False),
        sa.Column("maintenance_type", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("start_date", sa.DateTime(timezone=True), nullable=False),
        sa.Column("end_date", sa.DateTime(timezone=True), nullable=True),
        sa.Column("status", sa.String(length=20), nullable=True),
        sa.Column("performed_by", sa.String(length=100), nullable=True),
        sa.Column("cost", sa.Numeric(precision=10, scale=2), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["vessel_id"], ["vessels.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("maintenance_id"),
    )
    op.create_index(
        "idx_maintenance_records_dates",
        "maintenance_records",
        ["start_date", "end_date"],
        unique=False,
    )
    op.create_index(
        "idx_maintenance_records_status",
        "maintenance_records",
        ["status"],
        unique=False,
    )
    op.create_index(
        "idx_maintenance_records_vessel",
        "maintenance_records",
        ["vessel_id"],
        unique=False,
    )
    op.create_table(
        "route_points",
        sa.Column("route_point_id", sa.Integer(), nullable=False),
        sa.Column("vessel_id", sa.Integer(), nullable=False),
        sa.Column("sequence_number", sa.Integer(), nullable=False),
        sa.Column(
            "planned_position",
            geoalchemy2.types.Geometry(
                geometry_type="POINT",
                srid=4326,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.Column("planned_arrival_time", sa.DateTime(timezone=True), nullable=True),
        sa.Column("planned_departure_time", sa.DateTime(timezone=True), nullable=True),
        sa.Column("actual_arrival_time", sa.DateTime(timezone=True), nullable=True),
        sa.Column("status", sa.String(length=20), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["vessel_id"], ["vessels.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("route_point_id"),
        sa.UniqueConstraint("vessel_id", "sequence_number", name="uix_vessel_sequence"),
    )
    op.create_index(
        "idx_route_points_planned_arrival",
        "route_points",
        ["planned_arrival_time"],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        "idx_route_points_planned_position",
        "route_points",
        ["planned_position"],
        unique=False,
        postgresql_using="gist",
        if_not_exists=True,
    )
    op.create_index(
        "idx_route_points_vessel", "route_points", ["vessel_id"], unique=False
    )
    op.create_table(
        "vessel_parameters",
        sa.Column("parameter_id", sa.Integer(), nullable=False),
        sa.Column("vessel_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("value", sa.Text(), nullable=False),
        sa.Column("unit", sa.String(length=50), nullable=True),
        sa.Column("timestamp", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["vessel_id"], ["vessels.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("parameter_id"),
    )
    op.create_index(
        "idx_vessel_parameters_name", "vessel_parameters", ["name"], unique=False
    )
    op.create_index(
        "idx_vessel_parameters_vessel_name",
        "vessel_parameters",
        ["vessel_id", "name"],
        unique=False,
    )
    op.create_table(
        "alerts",
        sa.Column("alert_id", sa.Integer(), nullable=False),
        sa.Column("vessel_id", sa.Integer(), nullable=False),
        sa.Column("sensor_id", sa.Integer(), nullable=True),
        sa.Column("alert_type", sa.String(length=50), nullable=False),
        sa.Column("severity", sa.String(length=20), nullable=False),
        sa.Column("timestamp", sa.DateTime(timezone=True), nullable=True),
        sa.Column("message", sa.Text(), nullable=False),
        sa.Column("acknowledged", sa.Boolean(), nullable=True),
        sa.Column("acknowledged_by", sa.Integer(), nullable=True),
        sa.Column("acknowledged_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("resolved", sa.Boolean(), nullable=True),
        sa.Column("resolved_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["acknowledged_by"], ["operators.id"], ondelete="SET NULL"
        ),
        sa.ForeignKeyConstraint(["sensor_id"], ["sensors.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["vessel_id"], ["vessels.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("alert_id"),
    )
    op.create_index("idx_alerts_acknowledged", "alerts", ["acknowledged"], unique=False)
    op.create_index("idx_alerts_resolved", "alerts", ["resolved"], unique=False)
    op.create_index("idx_alerts_severity", "alerts", ["severity"], unique=False)
    op.create_index("idx_alerts_timestamp", "alerts", ["timestamp"], unique=False)
    op.create_index("idx_alerts_vessel", "alerts", ["vessel_id"], unique=False)
    op.drop_column("sensor_types", "min_val")
    op.drop_column("sensor_types", "max_val")
    op.drop_column("sensor_types", "measurement_unit")
    op.add_column(
        "sensors", sa.Column("measurement_unit", sa.String(length=50), nullable=True)
    )
    op.add_column("sensors", sa.Column("min_val", sa.Numeric(), nullable=True))
    op.add_column("sensors", sa.Column("max_val", sa.Numeric(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("sensors", "max_val")
    op.drop_column("sensors", "min_val")
    op.drop_column("sensors", "measurement_unit")
    op.add_column(
        "sensor_types",
        sa.Column(
            "measurement_unit",
            sa.VARCHAR(length=50),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "sensor_types",
        sa.Column("max_val", sa.NUMERIC(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "sensor_types",
        sa.Column("min_val", sa.NUMERIC(), autoincrement=False, nullable=True),
    )
    op.drop_index("idx_alerts_vessel", table_name="alerts")
    op.drop_index("idx_alerts_timestamp", table_name="alerts")
    op.drop_index("idx_alerts_severity", table_name="alerts")
    op.drop_index("idx_alerts_resolved", table_name="alerts")
    op.drop_index("idx_alerts_acknowledged", table_name="alerts")
    op.drop_table("alerts")
    op.drop_index("idx_vessel_parameters_vessel_name", table_name="vessel_parameters")
    op.drop_index("idx_vessel_parameters_name", table_name="vessel_parameters")
    op.drop_table("vessel_parameters")
    op.drop_index("idx_route_points_vessel", table_name="route_points")
    op.drop_index(
        "idx_route_points_planned_position",
        table_name="route_points",
        postgresql_using="gist",
    )
    op.drop_index("idx_route_points_planned_arrival", table_name="route_points")
    op.drop_table("route_points")
    op.drop_index("idx_maintenance_records_vessel", table_name="maintenance_records")
    op.drop_index("idx_maintenance_records_status", table_name="maintenance_records")
    op.drop_index("idx_maintenance_records_dates", table_name="maintenance_records")
    op.drop_table("maintenance_records")
    op.drop_index("idx_locations_vessel_timestamp", table_name="locations")
    op.drop_index("idx_locations_timestamp", table_name="locations")
    op.drop_index(
        "idx_locations_position", table_name="locations", postgresql_using="gist"
    )
    op.drop_table("locations")
    op.drop_index("idx_ais_data_vessel_timestamp", table_name="ais_data")
    op.drop_index("idx_ais_data_timestamp", table_name="ais_data")
    op.drop_index(
        "idx_ais_data_position", table_name="ais_data", postgresql_using="gist"
    )
    op.drop_table("ais_data")
    op.drop_index("idx_weather_data_timestamp", table_name="weather_data")
    op.drop_index(
        "idx_weather_data_location", table_name="weather_data", postgresql_using="gist"
    )
    op.drop_table("weather_data")
    # ### end Alembic commands ###
